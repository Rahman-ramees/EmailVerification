mongodb connecting normalcode is this //

// const { MongoClient } = require("mongodb");
// require('dotenv').config();

// // Replace the following with your Atlas connection string                                                                                                                                        
// const url = process.env.MONGODB_URI ;

// // Connect to your Atlas cluster
// const client = new MongoClient(url);

// async function run() {
//     try {
//         await client.connect();
//         console.log("Successfully connected to Atlas");

//     } catch (err) {
//         console.log(err.stack);
//     }
//     finally {
//         await client.close();
//     }
// }

// run().catch(console.dir);



user.js code youtuber //////////*************

const express = require('express')
const router = express.Router();

// mongodb user model
const User = require("./../model/User")


// paword handler 
const bcript = require('bcryptjs')

// Signup
router.post('/signup', (req,res) => {
    let {name, email , password , dateofbirth} = req.body;
    name = name.trim();
    email = email.trim();
    password = password.trim();
    dateofbirth = dateofbirth.trim();

    if (name == "" || email == "" || password == "" || dateofbirth == "") {
        res.json({
            status:"Filed",
            message:"Empty Input fields!"
        })
    }else if (!/^[a-zA-Z]*$/.test(name)) {
        res.json({
            status:"Failed",
            message:"Invalid Name entered "
        })
    }else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(email)) {
        res.json({
            status:"Failed",
            message:"Invalid Email entered "
        })
    }else if(!new Date(dateofbirth).getTime()){
        res.json({
            status:"Failed",
            message:"Invalid Date of birth entered "
        })
    }else if(password.length < 8){
        res.json({
            status:"Failed",
            message:"Password is too short!"
        })
    }else{
        // checking if user already exists
        User.find({email}).then(result => {
            if(result.length){ 456
                // A user already exist
                res.json({
                    status:"Failed",
                    message:"User with the provided email already exists"
                })
            }else{
                // try to create user

                // password handling
                const saltrounds = 10
                bcript.hash(password, saltrounds).then(hashedpassword => {
                    const newUser = new User({
                        name,
                        email,
                        password:hashedpassword,
                        dateofbirth
                    });
                    newUser.save().then(result => {
                        res.json({
                            status:"SUCCESS",
                            message:"Signup successfull",
                            data:result
                        })
                    }).catch(err => {
                        res.json({
                            status:"Failed",
                            message:"An error occurred while saving user account!"
                        })
                    })
                }).catch(err => {
                    res.send({
                        status:"Failed",
                        message:"An error occurred while hashing password!"
                    })
                })
                
            }
        }).catch(err => {
            console.log(err);
            res.json({
                status:"Failed",
                message:"An error occurred while checking for existing user!"
            })
        })
    }
})

// Signin
router.post('./signin', (req,res) => {

})

module.exports = router